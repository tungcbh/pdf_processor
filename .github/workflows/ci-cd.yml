name: CI/CD Pipeline for SQLWithIndexing

on:
  push:
    branches:
      - SQLWithIndexing
  pull_request:
    branches:
      - SQLWithIndexing

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: pdf_processor
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 2s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and test Docker image
        run: |
          docker build -t pdf-processor:latest .
          docker run -d --name pdf-app \
            -e DB_HOST=postgres \
            -e DB_PORT=5432 \
            -e DB_NAME=pdf_processor \
            -e DB_USER=postgres \
            -e DB_PASSWORD=123456 \
            --network host \
            -p 8000:8000 \
            pdf-processor:latest
          sleep 5
          curl -s http://localhost:8000 || exit 1
          docker stop pdf-app

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/pdf-processor:${{ github.sha }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/pdf-processor:${{ github.sha }}

      - name: Deploy to EC2 with Nginx
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$EC2_KEY" > ec2_key.pem
          chmod 400 ec2_key.pem
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${EC2_USER}@${EC2_HOST} << 'EOF'
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker network create pdf-network || true
            sudo mkdir -p /data/postgres-data && sudo chown 999:999 /data/postgres-data && sudo chmod 700 /data/postgres-data

            # Dừng và xóa các container cũ
            docker stop postgres-db pdf-app nginx || true
            docker rm postgres-db pdf-app nginx || true

            # Chạy container PostgreSQL
            docker run -d --name postgres-db \
              --network pdf-network \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e POSTGRES_DB=pdf_processor \
              -v /data/postgres-data:/var/lib/postgresql/data \
              postgres:13
            sleep 5

            # Chạy container ứng dụng
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pdf-processor:${{ github.sha }}
            docker run -d --name pdf-app \
              --network pdf-network \
              -e DB_HOST=postgres-db \
              -e DB_PORT=5432 \
              -e DB_NAME=pdf_processor \
              -e DB_USER=postgres \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/pdf-processor:${{ github.sha }}
            sleep 5

            # Kiểm tra kết nối DB
            docker exec pdf-app python -c "import psycopg2; conn = psycopg2.connect(host='postgres-db', port=5432, dbname='pdf_processor', user='postgres', password='${{ secrets.DB_PASSWORD }}'); conn.close()" || exit 1

            